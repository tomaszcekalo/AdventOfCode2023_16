// See https://aka.ms/new-console-template for more information
using System.Drawing;
using System.Text;

Console.WriteLine("Hello, World!");

var inputSmall = @".|...\....
|.-.\.....
.....|-...
........|.
..........
.........\
..../.\\..
.-.-/..|..
.|....-|.\
..//.|....";

var input = @"\........../.......-........|....\.......-..\/....|................\........../.|..././........\.........../..
...............\..\................/............\................./................../.........\..|....|/|-...
.../..........................\.....|.............-.......././.......-.|..../|.....-\........-....../.........
|..........................-..........-......./............................-..|................-..............
.....|......../...../.......-.\..............................-........|............|/.../../........./........
..\...|..-......\.........-\.||........|./................\....\........-..\..................../..\....-...|.
.|...........|............-........./.-.................|.|....../...............|..../..-..-...\...........|.
..............\............................................................./......................./\....-...
./........|...\.\..|..-....\............................|........./.................|/...............-........
\....\./.............../................../....|......./........../.\......./........-....\......../....../|..
./......--..........\..|.--........-...../......./........\.....|/..................|//...........|.........-.
.......|.....\-.\..-......-.........|.....................-/\.....-..........|.............-....\.....\.-.....
..--...\....-..|..................................-......-......\......-................\...../..-/....--.....
....-.........................\.\............|...............|.....-...\....|-................................
.................-..|.\..\....-..........|...../.....-...-.-../.............../................-..............
-..-......|..............................\.....\........|...../........\.................../..................
..............-.....-.|..........|.\..................|........|...........\.\...|........-...................
..\............/...\\........../...-..\.../.........\..|................../......\..-.../....................\
..................|...\......................./...|......../..............-./...\........\......./|...\..-..-.
.................................................-................|.........................................\.
......-...............................|./............./...........................-\/..../......\..........\..
......\....|..........................\.-|..........................|....................\.....\/...-.........
..\..-|...|.....-...../......./....|...............\................|..|.......\...........................-..
..\......-.......\.........\................|...........|....../...../..........-./...-|..................../.
................./.......\...|.....\....-................./......../..\...........-...|.../|................\.
..|..\./.........\.\.......................-......|....-..../.../................-.......\../.../...../.......
........../........./..|..-....................\\............\........................-......-......|.........
.../-....\..\..........\....\\......................................./........\...-.................\.........
................................../.................|..\.-..|................|/....-.........................|
...-.................||..../....................-..........................................|.-................
..//.\..........................|.....|-.............\.\......-....\.\.......\............-..............\-...
.......|.|..-........./..|........-.....|........................-...................-......\................-
..-..|..........|....-.............|.|/...../../..................\...\................../......|....|........
........\..././.............../.............../....-../.....|....\................|/.../.....|.|-..|..........
......|..........\...-./........-...............................\..........|.............|..\..|......./.....|
.............................-................................................|................/......\.../..-
......-........\..........-..../...............\............/.....\......|........................-.|.../.....
...\...............-....-........-............-...../....|.\.../.......\..-....................|........|.....
.............................-...\....|...|.......\............................-............\.................
....................|...-........-.........-..\................/....................../.|.......-.............
......\.........................../....-....|...........................................\...-.........|......\
.............\../\..............|\.\..........|\.../..................../\...................|\.......\.......
/.................../.\\.........................../...........-...-..........-..-............................
............\......../........-.........../........./.................-................./...........|.........
.........\.......|.......\........./.....................\..............\\....../...|-....\..|..-.....|.......
.|....-.............\.........\.\../.......-...........................\./..........................--\......\
........./..../................./.................\............................................./../.\........
.....-..............-.-...\/..|....-........./.....................\................./.\..........-...|....|..
........|...|.-.......|.......-............\.../....|...\............../............-.........................
........................|.....\........................./\/.........................|.........................
....\..././..........|.....\......................-................./.....|...............................|-..
.../.........../.-......\..../.................-...\.....-......\.....\..............//.|..............-..-...
....../............./-/.\...........\...\..|/........................-...../......\........-./\..........||...
.................................../............|....................../..|.....\......\............/.........
.....|....\...|.-./............................./..-....|.\.......................-../.-..-.........\.........
..........\...|../.......-|............-........../...../..........-......-../.-......|..../.-.../............
.-.........-............|/.......-........|...................-.........-........../.-........\..........|/...
.........\.........\....../....|...\\......-..........-................\................................-.....
............-...../......|...//........\-....|......../........./..................-................../....--.
...............|.................................|.../...\....................\................|...\.|........
..............\.........\.........\....|.-.......\.\........-.........../...|.....|..............\.......\....
........-.-.....|.../......-\..|.....-.........|.-................\......./....\...-.....\..|/...............|
....|.....................-...................\......\......-.......................-...../........./....\....
..|...|.......\./..-..............\.............................................\../....|.....................
..................-../........|.....-\.../................................................./..\...|......-...-
.....\......\........\.....................|...|../......../....../.\........./...............................
............../........../...........\..\/..|.\...|..........-................................\-..............
/...............\...|......\............/|...................|....././...\............................-.|.....
...........|................/-......\.....-.........-.............../......./............../|.................
..-...........|..\.............\....|/...............|..../..............\...............|./......|........./.
.....\\..|......\....\.......-.................\.-......................|........./...|.........|...|...-.....
-...../....|....../............./.......|/../\.............../...../-\.../-.......|........../..............\\
..........\....................../.................|...--../..................................................
.\.................../......|......-.............................//......|.../|.|....\.............\..........
.\-...........-.........|..................................../........|......../...-............\....-...-....
......\......|................-...../....|........-..\.....-........//................../.....|.........-.....
.....-..........-.|/.........-....................../......|.|./........................................./\\|.
...\................|.........../..-....|..-..........|........../....-....../......./.....-..\.....\\..../...
.....\.....-..................-...-..../....|....|.................|...\./.............../.......|.\/...../...
.||......../........../.-...|...........\.................\........-........|........................-...|....
........./......\......|...............\.\.................................................\.................|
..........................|....................|..../-...............|....|......../....-..................|..
.-........\.|......../...|...................|.........|............\.....|.......\........./.................
................-........................\...........|................../................-.............\......
.......\..........|.............../...|.-......................../....\.............-.......\./...............
..........\...........................................-........|.......\........./...-........\...............
../......./...\|...............-........\................./...\...................../.....-.-....-...........-
.\../......../....-\................................|.....-..|...............................-................
..........................\.....|................/.....\......../.............|..............\......./-..|....
|.........-.|............./......-.................|.......|...\/...........|...........................\\....
-..................|.........................-.............-.....|..../.........\...-/.....|............/\....
.........\.\....\...........|....-.../..............|.....|-.......\.............-......./......././.......\..
..../.....-...........................................\.../..\.|.......................-..//....-......|......
./-..................\..\....................................\......./.\....|.................................
...../....................................-....-/........................-/.........-.\...|......./..-.\......
.....|.............-.......|-..-.................................|-...........................\.|.....|.......
.........\-.............\.............../....-....|....-.|..........\............|.\...|.....-................
............/.......-....|./....|../..../......./..\.................-..................|.....................
../....-........./.....\...............\......-....|...\........../.....|........................\............
...../.\.............\.........................-..|.......|......-......|................./......./-..........
...\..........\.......................\.-..././.........|..\..................\...../...|.......|............-
........./............-..................................|.....................-..............................
........................|.....\.........\..............-..\..........||...../.\\./....../.....................
.................-.............\.../...........\...\......--................\.....\.............\....-........
.../-..........\.\............-.......-.............\..\.\...../........|...-..-..|..........\................
\.|..\......\-......./.........||..\.........................................................-...../..........
....|..........................................\......-..........\.../...\-........|..........................
.......-.......\..//./....|...............\.\..-...\....|....................-......\......\..-......../......
/..../../....-../....-....-......................\........./..........-/..\......./..\-.../..........|........
.|....\\........./....\.............-......--\...........|.........|..\...................../........./.\.....";

var emitter = new BeamEmitter(input);
emitter.EmitBeam(Beam.Right, new Point(0, 0), true);

Console.WriteLine($"initial beam configuration that energizes the largest number of tiles, energizes {emitter.FindMaximumEnergized()} tiles");

public enum From
{
    Up = 1, Down = 2, Left = 4, Right = 8
}

public class BeamEmitter
{
    public string[] Lines;

    public BeamEmitter(string input)
    {
        Lines = input.Split(Environment.NewLine);
    }

    public void DisplayBounces(From[][] Bounces)
    {
        StringBuilder sb = new StringBuilder();
        for (int y = 0; y < Lines.Length; y++)
        {
            for (int x = 0; x < Lines[y].Length; x++)
            {
                if (Lines[y][x] != '.')
                {
                    sb.Append(Lines[y][x]);
                    continue;
                }
                if (Bounces[y][x] == 0)
                {
                    sb.Append('.');
                    continue;
                }
                if (Bounces[y][x] == From.Left)
                {
                    sb.Append('>');
                    continue;
                }
                if (Bounces[y][x] == From.Up)
                {
                    sb.Append('v');
                    continue;
                }
                if (Bounces[y][x] == From.Right)
                {
                    sb.Append('<');
                    continue;
                }
                if (Bounces[y][x] == From.Down)
                {
                    sb.Append('^');
                    continue;
                }
                sb.Append('2');
            }
            sb.AppendLine();
        }
        Console.WriteLine(sb.ToString());
    }

    public From Translate(Point direction)
    {
        if (direction.X > 0)
        {
            return From.Left;
        }
        if (direction.Y > 0)
        {
            return From.Up;
        }
        if (direction.X < 0)
        {
            return From.Right;
        }
        if (direction.Y < 0)
        {
            return From.Down;
        }
        return 0;
    }

    public int FindMaximumEnergized()
    {
        List<int> results = new List<int>();
        for (int y = 0; y < Lines.Length; y++)
        {
            //emit right, from left edge
            results.Add(EmitBeam(new Point(1, 0), new Point(0, y)));
            //emit left, from right edge
            results.Add(EmitBeam(new Point(-1, 0), new Point(Lines.Length - 1, y)));
        }
        for (int x = 0; x < Lines[0].Length; x++)
        {
            //emit down, from top edge
            results.Add(EmitBeam(new Point(0, 1), new Point(x, 0)));
            //emit up, from bottom edge
            results.Add(EmitBeam(new Point(0, -1), new Point(x, Lines[0].Length - 1)));
        }
        return results.Max();
    }

    public int EmitBeam(Point initialDirection, Point initialPosition, bool displayLogs = false)
    {
        var beams = new List<Beam>()
        {
            new Beam()
            {
                Direction =  initialDirection,
                Position = initialPosition,
            }
        };
        HashSet<Point> Energized = new HashSet<Point>();
        From[][] Bounces;
        Bounces = new From[Lines.Length][];
        for (int y = 0; y < Lines.Length; y++)
        {
            Bounces[y] = new From[Lines[y].Length];
            for (int x = 0; x < Lines[y].Length; x++)
            {
            }
        }
        var energizedFails = 0;
        while (energizedFails < 55)
        {
            var energized = 0;
            for (int i = 0; i < beams.Count; i++)
            {
                var beam = beams[i];
                if (beam.Position.X < 0
                    || beam.Position.Y < 0
                    || beam.Position.Y >= Lines.Length
                    || beam.Position.X >= Lines[beam.Position.Y].Length)
                    continue;
                Bounces[beam.Position.Y][beam.Position.X] |= Translate(beam.Direction);
                if (!Energized.Contains(beam.Position))
                {
                    Energized.Add(beam.Position);
                    energized++;
                }
                //reflect
                if (Lines[beam.Position.Y][beam.Position.X] != '.')
                {
                    if (Lines[beam.Position.Y][beam.Position.X] == '|'
                        && beam.Direction.X != 0)
                    {
                        beam.Direction = Beam.Up;
                        beams.Add(new Beam()
                        {
                            Position = beam.Position,
                            Direction = Beam.Down
                        });
                    }
                    else if (Lines[beam.Position.Y][beam.Position.X] == '-'
                        && beam.Direction.Y != 0)
                    {
                        beam.Direction = Beam.Left;
                        beams.Add(new Beam()
                        {
                            Position = beam.Position,
                            Direction = Beam.Right
                        });
                    }
                    else
                    {
                        beam.Reflect(Lines[beam.Position.Y][beam.Position.X]);
                    }
                }
                beam.Move();
            }
            if (energized == 0)
            {
                energizedFails++;
            }
        }
        if (displayLogs)
        {
            DisplayEnergized(Energized);
            DisplayBounces(Bounces);
            Console.WriteLine($"Ultimately, in this example, {Energized.Count} tiles become energized.");
        }
        return Energized.Count;
    }

    public void DisplayEnergized(HashSet<Point> Energized)
    {
        StringBuilder sb = new StringBuilder();
        for (int y = 0; y < Lines.Length; y++)
        {
            for (int x = 0; x < Lines[y].Length; x++)
            {
                if (Energized.Contains(new Point(x, y)))
                {
                    sb.Append('#');
                }
                else
                {
                    sb.Append('.');
                }
            }
            sb.Append(Environment.NewLine);
        }
        Console.WriteLine(sb.ToString());
    }
}

public class Beam
{
    public Point Direction { get; set; }
    public Point Position { get; set; }

    public void Move()
    {
        var x = Position.X + Direction.X;
        var y = Position.Y + Direction.Y;
        Position = new Point(x, y);
    }

    public void Reflect(char character)
    {
        var directionX = Direction.X;
        var directionY = Direction.Y;
        if (character == '\\')
        {
            Direction = new Point(directionY, directionX);
        }
        else if (character == '/')
        {
            Direction = new Point(-directionY, -directionX);
        }
    }

    public static Point Down => new Point(0, 1);

    public static Point Up => new Point(0, -1);

    public static Point Left => new Point(-1, 0);

    public static Point Right => new Point(1, 0);
}